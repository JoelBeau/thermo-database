#!/usr/bin/env python
import sys
import os
import mysql.connector
from tabulate import tabulate

# Add the parent directory of the bin directory to the Python path
script_dir = os.path.dirname(os.path.realpath(__file__))
project_root = os.path.abspath(os.path.join(script_dir, os.pardir))
sys.path.append(project_root)


from scripts.key2table import convert_table


def run_sql_cmd(sql_table, column, value):
    config = {
        "user": "jbeau",
        "password": "MaverickIT16$",
        "host": "localhost",
        "database": "thermodynamics",
    }

    conn = mysql.connector.connect(**config)
    cursor = conn.cursor()

    sql_cmd = f"SELECT * FROM {sql_table} WHERE {column} = '{value}'"

    try:
        cursor.execute(sql_cmd)
        result = cursor.fetchall()

        # Fetch column names
        column_names = [i[0] for i in cursor.description]
        # Format the result using tabulate
        formatted_result = tabulate(result, headers=column_names, tablefmt="psql")

        print(formatted_result)
    except mysql.connector.Error as e:
        print(f"Error: {e}")
    finally:
        cursor.close()
        conn.close()


def convert2table():
    table = ""
    elements = {
        "water": "water",
        "water pressure entry": "water_pressure_entry",
        "ammonia": "ammonia",
        "carbion dioxide": "carbon_diox",
        "methane": "methane",
        "compressed liquid water": "compr_liq_water",
        "saturated solid saturated vapor water": "solid_sat_vapor_water",
        "vapor water": "vapor_water",
        "nitrogen": "nitrogen",
        "methane": "methane",
        "r134a": "r134a",
        "r410a": "r410a",
    }

    available_elements = elements.keys()

    print("Available elements: ")

    for i in range(len(available_elements)):
        print(f"{i+1}. {list(available_elements)[i]}")

    element = None
    state = None
    property = None
    pressure = None

    print("\nElement? slect from the list above (1-11)")
    element = input()
    element = list(available_elements)[int(element) - 1].lower()
    element = elements.get(element)

    #Determine state, the first if statement is for the saturated water and saturated water pressure entry, as the only state they can be in is saturated
    if element == "water" or element == "water_pressure_entry" or element == "solid_sat_vapor_water":
        state = "s"
    elif element != "compr_liq_water":
        print("Saturated or superheated? (s/su)")
        state = input()

    #If the state is saturated, the user must choose between specific volume/internal energy or enthalpy/entropy
    if state == ("s"):
        print("Specific volume/Internal energy or Enthalpy/Entropy? (sv/ee)")
        property = input()

        #Change shorthand to full name
        if property == "sv":
            property = "vol_eng"
        else:
            property = "enthalpy_entropy"

    #If the state is superheated, the user must enter a pressure range, else the state is saturated
    if state == "su" or element == "compr_liq_water":
        print("Enter pressure range (kPa) (e.g. 50-100)")
        pressure = input()
        pressures = pressure.split("-")
        pressure = "pa" + pressures[0] + "_pa" + pressures[1]
    else:
        state = "sat"

    #Change shorthand to full name
    if state == "su":
        state = "superheated"

    #Column names to search by
    col_names = ("temperature", "pressure")

    print("")

    #Print column names available to search by
    for i in range(len(col_names)):
        print(f"{i+1}. {col_names[i]}")

    #User selects column name to search by
    print(f"\nLook up name? select from the list above (1-2)")
    lookup_name = input()
    lookup_name = col_names[int(lookup_name) - 1]

    #User enters value to search by
    print(f"Look up value for {lookup_name}?")
    lookup_val = input()

    #Create table name in correct format
    if element == "compr_liq_water":
        table = {f"{element}_{pressure}": [f"{lookup_name}", f"{lookup_val}"]}
    elif state == "superheated":
        table = {f"{state}_{element}_{pressure}": [f"{lookup_name}", f"{lookup_val}"]}
    else:
        table = {f"{state}_{element}_{property}": [f"{lookup_name}", f"{lookup_val}"]}
    return table


table_w_look_up = convert2table()
sql_table = table_w_look_up.keys()
sql_table = list(sql_table)[0]
column = table_w_look_up[sql_table][0]
value = table_w_look_up[sql_table][1]

print(f"Running sql command: SELECT * FROM {sql_table} WHERE {column} = {value}...")

run_sql_cmd(sql_table, column, value)

table = convert_table(sql_table)

print(f"\nThe proper table for {sql_table} is {table}")
